import { getDetailsForUUID } from "../../client/api-client";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import { Box, Button, Heading, Spinner } from "@chakra-ui/react";

export default function TranscriptionResult() {
  const [transcriptionResult, setTranscriptionResult] = useState<any>(null); // TODO: type this
  const [improvement, setImprovement] = useState<string>("");
  const [waiting, setWaiting] = useState<boolean>(true);
  const [showImprovement, setShowImprovement] = useState<boolean>(false);
  const router = useRouter();
  const refId = router.query.refId as string;

  useEffect(() => {
    if (waiting && refId) {
      console.info("Trying to get results for " + refId);
      console.debug("have uuid");
      console.debug("sending request");
      getDetailsForUUID(refId).then((data) => {
        if (data["result"]) {
          console.debug("have data", data);
          setTranscriptionResult(JSON.parse(data["result"]));
          setImprovement(data["improvement"]);
          setWaiting(false);
        }
      });
    }
  }, [refId, waiting]);

  return (
    <>
      <Head>
        <title>transcribe</title>
        {/*<meta name="description" content="Generated by create next app" />*/}
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://unpkg.com/mvp.css@1.12/mvp.css" />
      </Head>
      <main>
        <section>
          {/*<header><h2>{refId}</h2></header>*/}
          {waiting && <Spinner />}

          {!waiting && !transcriptionResult && (
            <Box paddingTop={10} paddingBottom={10}>
              <Heading as={"h5"}>
                Transcription is non-existent or still in progress!
              </Heading>
            </Box>
          )}
          {!waiting && transcriptionResult && improvement && (
            <Box paddingTop={10} paddingBottom={10}>
              <Button onClick={() => setShowImprovement(false)}>
                Original
              </Button>
              <Button onClick={() => setShowImprovement(true)}>
                Improvement
              </Button>
            </Box>
          )}
          {!waiting && transcriptionResult && !showImprovement && (
            <div style={{ whiteSpace: "pre-line" }}>
              <Heading as={"h1"} size="3xl">
                Transcription
              </Heading>
              <p>{transcriptionResult.transcription}</p>
            </div>
          )}
          <br />
          {!waiting && improvement && showImprovement && (
            <div style={{ whiteSpace: "pre-line" }}>
              <Heading as={"h1"} size="3xl">
                Improvement
              </Heading>
              <p>{improvement}</p>
            </div>
          )}
        </section>
      </main>
    </>
  );
}
