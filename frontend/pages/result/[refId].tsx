import { getDetailsForUUID } from "../../client/api-client";
import { useEffect, useState } from "react";
import { useRouter } from "next/router";
import Head from "next/head";
import {
  Text,
  Alert,
  AlertIcon,
  Box,
  Button,
  Heading,
  Link,
  Spinner,
} from "@chakra-ui/react";
import { Transcription } from "../../components/Transcription";
import YouTube from "react-youtube";

export default function TranscriptionResult() {
  const [transcriptionResult, setTranscriptionResult] = useState<any>(null); // TODO: type this
  const [improvement, setImprovement] = useState<string>("");
  const [waiting, setWaiting] = useState<boolean>(true);
  const [showImprovement, setShowImprovement] = useState<boolean>(false);
  const [link, setLink] = useState<string>("");
  const router = useRouter();
  const refId = router.query.refId as string;

  useEffect(() => {
    if (waiting && refId) {
      console.info("Trying to get results for " + refId);
      console.debug("have uuid");
      console.debug("sending request");
      getDetailsForUUID(refId).then((data) => {
        if (data["result"]) {
          setLink(data["link"]);
          setTranscriptionResult(JSON.parse(data["result"]));
          setImprovement(data["improvement"]);
          setWaiting(false);
        }
      });
    }
  }, [refId, waiting]);

  useEffect(() => {
    if (improvement) {
      setShowImprovement(true);
    }
  }, [improvement]);

  return (
    <>
      <Head>
        <title>transcribe</title>
        {/*<meta name="description" content="Generated by create next app" />*/}
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
        <link rel="stylesheet" href="https://unpkg.com/mvp.css@1.12/mvp.css" />
      </Head>
      <main>
        <section>
          {/*<header><h2>{refId}</h2></header>*/}
          {waiting && <Spinner />}
          {!waiting && !transcriptionResult && (
            <Box paddingTop={10} paddingBottom={10}>
              <Heading as={"h5"}>
                Transcription is non-existent or still in progress!
              </Heading>
            </Box>
          )}
          {/*** TODO: think about hiding this entirely */}
          {!waiting && transcriptionResult && !improvement && (
            <Alert status="info">
              <AlertIcon />
              We&lsquo;re working on improving this transcription. Please check
              again later.
            </Alert>
          )}
          {!waiting && transcriptionResult && improvement && (
            <Alert status="success" style={{ marginBottom: "20px" }}>
              {showImprovement ? (
                <Text>
                  This is a GPT-3 enhanced version of the transcription ✨.
                  Click{" "}
                  <Link onClick={() => setShowImprovement(false)}>here</Link> to
                  see the original.
                </Text>
              ) : (
                <Text>
                  There is an improved ✨ version of this transcription
                  available. Click{" "}
                  <Link onClick={() => setShowImprovement(true)}>here</Link> to
                  see it.
                </Text>
              )}
            </Alert>
          )}
          {!waiting && link && (
            <Box
              as="iframe"
              src={`https://youtube.com/embed/${link.split("=")[1]}`}
              style={{ width: "80%", marginBottom: "20px" }}
              sx={{ aspectRatio: "16 / 9" }}
            />
          )}
          {!waiting && transcriptionResult && !showImprovement && (
            <Transcription text={transcriptionResult.transcription} />
          )}
          <br />
          {!waiting && improvement && showImprovement && (
            <Transcription text={improvement} />
          )}
        </section>
      </main>
    </>
  );
}
